********************************************************************************
********* Practical Session 2: Datamining For Big Data *************************
********************************************************************************

You can do this exercises in groups of at most 2 peoples.  You need to
complete this file with your answers and upload it in the "M2 CS Big data
(BIG DATA)" course on Claroline connect.


****** Fill in the student names in your group: 
- Abdul Rahman Zakarya
- Muaz Twaty
****** end names

The text files used in this practical session are available as an archive on claroline.

You should copy in this file the code that you type in the interactive shell. 


********************************************************************************
*********** Part IV: Matrix Operations
********************************************************************************

In this part, you will compute several operations on matrix / vectors.

- The dot product of two vectors V=(V1,...,Vn) and W=(W1,...,Wn) is:
  V.W = sqrt( V1*W1 + V2*W2 + ... + Vn*Wn)

- The L2 norm of a vector V is:
  norm(V) = sqrt( V1*V1 + V2*V2 + ... + Vn*Vn)

- The product of a matrix M and a vector V is:
  W = M.V with Wi = M[i,.] * V = sum_j M[i,j].Vj
  (the ith component of W is the dot product between the ith row of M and V).

Examples of matrix and vectors are stored in files M.txt, V.txt and W.txt (in data.zip).
They use a sparse coding.
I.e., each line of M.txt has the form:
i j M[i,j]
where i is the row number, j the column number and M[i,j] the value in matrix M at row i column j.
Only the non zero values M[i,j] are stored in the file.

For instance, if M is the 3x3 matrix: 
    0   5.3 0
M = 6.2 0   0
    0   0   0
it can be represented by a file with two lines (since there are only two non-zero values):
1 2 5.3
2 1 6.2

A vector V is represented in a similar way by lines:
i Vi

1)
We want to compute the dot product V.W = V1.W1 + V2.W2 + ... + Vn.Wn
To this aim, you can build one RDD for each vector and then use the "join" operation to group coordinates (ie, V1 with W1, V2 with W2, ...). Then compute the dot product.
hint: you can use the int() and float() functions: int("5") is the integer 5 
and float("5.4") is the float value 5.4.
******* answer 4.1: do not modify or remove this line
def vecmap(line):
    split = line.split()
    return (int(split[0]), float(split[1]))

V = sc.textFile("V.txt").map(vecmap)
W = sc.textFile("W.txt").map(vecmap)

def vecmult(X):
    pairs = X[1]
    return pairs[0] * pairs[1]

VdotW = V.join(W).map(vecmult).reduce(lambda a,b: a+b)
print(VdotW)
******* end answer 4.1: do not modify or remove this line


2) The L2 norm of a vector V is norm(V) = sqrt(V1*V1 + V2*V2 + ... +Vn*Vn)
Compute the L2 norm of V and W.
To use the sqrt function, you need to import it using (in the pyspark shell):
from math import sqrt
******* answer 4.2: do not modify or remove this line
import math
L2V = math.sqrt(V.join(V).map(vecmult).reduce(lambda a,b: a+b))
print(L2V)
******* end answer 4.2: do not modify or remove this line


Now, we want to compute the matrix vector product M.V (which should also be represented by a sparse coding).

3) Build a RDD which contains all the (non zero) products of the form M[i,j].Vj (you can use the "join" operation on RDDs). Your RDD may also contains other information such as row and/or column numbers.
******* answer 4.3: do not modify or remove this line
def matmap(line):
    split = line.split()
    return (int(split[1]), (int(split[0]), float(split[2])))

M = sc.textFile("M.txt").map(matmap)
V = sc.textFile("V.txt").map(vecmap)

def matvecmult(X):
    row = X[1][0][0]
    m = X[1][0][1]
    v = X[1][1]
    return (row, m * v)

products = M.join(V).map(matvecmult)
products.collect()
******* end answer 4.3: do not modify or remove this line

4) From the previous RDD, build the RDD which contains the vector W=M.V. Recall that zero values must not appear in this RDD.
******* answer 4.4: do not modify or remove this line
products.reduceByKey(lambda a, b: a + b).collect()
******* end answer 4.4: do not modify or remove this line

5) (optional) write a program that computes the largest eigenvalue of matrix M. 

One possible algorithm is the power iteration method:
Start from a random vector V_0 and compute the sequences (for i >= 0):
NV_i = V_i/norm(V_i)  # normalizing V_i
V_(i+1) = M.NV_i      # compute V_(i+1)

Then the dot product 
V_(i+1).NV_i
will converge towards the eigenvalue of M with the largest norm when i goes to infinity.

******* answer 4.5: do not modify or remove this line
   Replace by your answer
******* end answer 4.5: do not modify or remove this line

If you want to write a standalone program, copy the following code in a file
eigen.py
and start it by:
<PATH_TO_SPARK_INSTAL>/bin/spark-submit eigen.py
or 
<PATH_TO_SPARK_INSTAL>/bin/spark-submit eigen.py 2> /dev/null
to completely avoid any messages from spark

############################################### eigen.py
from pyspark import SparkContext, SparkConf

# To start this spark program:
# <PATH_TO_SPARK_INSTAL>/bin/spark-submit eigen.py  

#### Create the Spark Context and start Spark:
myconf = SparkConf().setAppName("eigenvalue")
sc = SparkContext(conf=myconf)
sc.setLogLevel("WARN") # to avoid too many messages
#### Spark context created.

# write your code here

# stop Spark:
sc.stop()
############################################################"
